"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[895],{5646:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var o=t(4848),s=t(8453);const r={title:"Quickstart",description:"Basic examples from each module to help you get started.",sidebar_position:2},l=void 0,a={id:"guides/quickstart",title:"Quickstart",description:"Basic examples from each module to help you get started.",source:"@site/docs/guides/quickstart.mdx",sourceDirName:"guides",slug:"/guides/quickstart",permalink:"/docs/guides/quickstart",draft:!1,unlisted:!1,editUrl:"https://github.com/prjctimg/huetiful/tree/main/www/docs/guides/quickstart.mdx",tags:[],version:"current",lastUpdatedBy:"Dean prjctimg",lastUpdatedAt:1725722201e3,sidebarPosition:2,frontMatter:{title:"Quickstart",description:"Basic examples from each module to help you get started.",sidebar_position:2},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/guides/intro"}},i={},c=[{value:"Color conversion",id:"color-conversion",level:3},{value:"Builtin color maps\ud83c\udfa8",id:"builtin-color-maps",level:3},{value:"Tailwind",id:"tailwind",level:4},{value:"Collection methods",id:"collection-methods",level:3},{value:"Sorting colors",id:"sorting-colors",level:4},{value:"Filtering colors",id:"filtering-colors",level:4},{value:"Palette generators",id:"palette-generators",level:3},{value:"Predicates\u2696\ufe0f",id:"predicates\ufe0f",level:3},{value:"What next ?",id:"what-next-",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h3,{id:"color-conversion",children:"Color conversion"}),"\n",(0,o.jsx)(n.p,{children:"A color can be defined using different types(arrays, strings, numbers, plain objects etc). Below are examples listing all the valid color tokens:"}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["For more information about color tokens ",(0,o.jsx)(n.a,{href:"/docs/guides/color",children:"see this page"})]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { token } from 'huetiful-js'\n\nlet cssNamedColor = 'pink'\nlet colorNumber = 5000\nlet colorObject = { l: 50, c: 20, h: 40, mode: 'lch' }\nlet colorObjectWithAlpha = { l: 50, c: 20, h: 40, alpha: 0.5, mode: 'lch' }\nlet arrColor = ['rgb', 120, 80, 50]\nlet arrColorWithAlpha = ['rgb', 120, 80, 50, 0.1]\n\nvar  allColors = [cssNamedColor,colorNumber,colorObject,colorObjectWithAlpha,arrColor,arrColorWithAlpha]\n\n\nlet res = []\nfor (const color of allColors) {\n  res.push((token(color)))\n}\n\n\nconsole.log(res)\n\n// ['#ffc0cb','#001388','#956d62','#956d6280','#785032',#7850321a]\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"builtin-color-maps",children:"Builtin color maps\ud83c\udfa8"}),"\n",(0,o.jsx)(n.h4,{id:"tailwind",children:"Tailwind"}),"\n",(0,o.jsxs)(n.p,{children:["The library comes along with the default TailwindCSS palette included. This helps you get started easier when you're using ",(0,o.jsx)(n.a,{href:"/docs/api/generators",children:"palette generators"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:" import { colors } from \"huetiful-js\";\n\n\n\n// colors() has a builtin parameter called 'all' that returns all colors at the specified value which is '300' in this example\nlet all300 = colors(\"all\", 300);\n\nconsole.log(all300)\n//[\n  '#cbd5e1', '#d1d5db', '#d4d4d8',\n  '#d4d4d4', '#d6d3d1', '#fca5a5',\n  '#fdba74', '#fcd34d', '#fde047',\n  '#bef264', '#86efac', '#6ee7b7',\n  '#5eead4', '#7dd3fc', '#93c5fd',\n  '#c4b5fd', '#d8b4fe', '#f0abfc',\n  '#f9a8d4', '#fda4af'\n]\n\nlet red = colors(\"red\");\nconsole.log(red);\n\n// [\n  '#fef2f2', '#fee2e2',\n  '#fecaca', '#fca5a5',\n  '#f87171', '#ef4444',\n  '#dc2626', '#b91c1c',\n  '#991b1b', '#7f1d1d'\n]\n\nlet red100 = colors(\"red\", 100);\n\nconsole.log(red100)\n// #fee2e2\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"collection-methods",children:"Collection methods"}),"\n",(0,o.jsx)(n.p,{children:"We can sort and filter colors using their property or channel values values like saturation,lightness and even contrast."}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["See the ",(0,o.jsx)(n.a,{href:"docs/guides/factors",children:"Factors"})," page to understand how color properties or attributes are used."]})}),"\n",(0,o.jsx)(n.p,{children:"Here are some example using the filtering and sorting functions on an array of colors:"}),"\n",(0,o.jsx)(n.h4,{id:"sorting-colors",children:"Sorting colors"}),"\n",(0,o.jsxs)(n.p,{children:["An example of sorting colors by hue angle and distance between each color in the collection as compared against 'yellow'. We get an object whose keys are the specified factors in the ",(0,o.jsx)(n.code,{children:"factors"})," option:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { sortBy } from \"huetiful-js\";\n\nlet sample = [\n  \"#00ffdc\",\n  \"#00ff78\",\n  \"#00c000\",\n  \"#007e00\",\n  \"#164100\",\n  \"#ffff00\",\n  \"#310000\",\n  \"#3e0000\",\n  \"#4e0000\",\n  \"#600000\",\n  \"#720000\",\n];\n\n\n\nlet sorted = sortBy(sample, {\n\t\tfactor: ['hue', 'distance'],\n\t\torder: 'asc',\n\t\tagainst: 'yellow'\n\t})\nconsole.log(sorted)\n\n// {\n//   hue: [\n//     '#310000', '#3e0000',\n//     '#4e0000', '#600000',\n//     '#720000', '#ffff00',\n//     '#164100', '#00c000',\n//     '#007e00', '#00ff78',\n//     '#00ffdc'\n//   ],\n//   distance: [\n//     '#ffff00', '#00ff78',\n//     '#00c000', '#007e00',\n//     '#00ffdc', '#164100',\n//     '#720000', '#600000',\n//     '#4e0000', '#3e0000',\n//     '#310000'\n//   ]\n// }\n\n\n"})}),"\n",(0,o.jsx)(n.h4,{id:"filtering-colors",children:"Filtering colors"}),"\n",(0,o.jsxs)(n.p,{children:["An example of filtering colors by their relative contrast and luminance. In this case, we get an object whose keys are the specified ",(0,o.jsx)(n.code,{children:"factor"}),"s and values are the color tokens that are within the defined ranges."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"\n\n let sample = [\n  '#00ffdc',\n  '#00ff78',\n  '#00c000',\n  '#007e00',\n  '#164100',\n  '#ffff00',\n  '#310000',\n  '#3e0000',\n  '#4e0000',\n  '#600000',\n  '#720000',\n]\n\n\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://huetiful-js.com/docs/api/collection",children:"See more functions for manipulating collections"})}),"\n",(0,o.jsx)(n.h3,{id:"palette-generators",children:"Palette generators"}),"\n",(0,o.jsxs)(n.p,{children:["Here's an example of ",(0,o.jsx)(n.code,{children:"hueshift"})," and paired palettes."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { hueshift } from \"huetiful-js\";\n\nlet hueShiftedPalette = hueshift(\"#3e0000\");\n\nconsole.log(hueShiftedPalette);\n\n// [\n  '#ffffe1', '#ffdca5',\n  '#ca9a70', '#935c40',\n  '#5c2418', '#3e0000',\n  '#310000', '#34000f',\n  '#38001e', '#3b002c',\n  '#3b0c3a'\n// ]\n\n\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://huetiful-js.com/docs/api/palettes",children:"See more palette generator functions"})}),"\n",(0,o.jsx)(n.h3,{id:"predicates\ufe0f",children:"Predicates\u2696\ufe0f"}),"\n",(0,o.jsx)(n.p,{children:"Is this color cool\ud83e\udd76 or warm \ud83e\udd75, is it achromatic (grayscale) or chromatic? Though its easy to tell colors apart visually when they're displayed on the screen\ud83d\udcfa it can be a bit confusing to tell colors apart using code\ud83d\udd22. Below is an example showing how to determine if a color is gray or not:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'\nimport { achromatic,token } from "huetiful-js";\nimport { interpolate, samples } from "culori"\n\n\nachromatic(\'pink\')\n// false\n\nlet sample = [\n  "#164100",\n  "#ffff00",\n  "#310000",\n  \'pink\'\n];\n\nconsole.log(map(sample, achromatic));\n\n// [false, false, false,false]\n\nachromatic(\'gray\')\n// true\n\n\n\n// Here are using some of Culori\'s functions to demonstrate this example\n// we create an interpolation using black and white\nlet f = interpolate(["black", "white"]);\n\n//We then create 12 evenly spaced samples and pass them to f as the `t` param required by an interpolating function.\n// Lastly we convert the color to hex for brevity for this example (otherwise color objects work fine too.)\nlet grays = map(samples(12), (c) => formatHex8(f(c)));\nconsole.log(map(grays, isAchromatic));\n\n// The last two colors are false because we can\'t categorize black and white as achromatic.\n\n//\n [ false, true, true,\n  true,  true, true,\n  true,  true, true,\n  true,  true, false\n]\n\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"\nimport { temp } from 'huetiful-js'\n\nlet sample = [\n  \"#00ffdc\",\n  \"#00ff78\",\n  \"#00c000\"\n];\n\nconsole.log(sample.map(temp));\n\n// [ 'cool',  'warm', 'cool']\n\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Another use\ud83d\udc77 case would be passing the predicate to an array method like ",(0,o.jsx)(n.code,{children:"filter"})," to filter a collection of colors removing colors that are not warm/cool:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { temp } from 'huetiful-js'\n\nlet sample = [\n  \"#00ffdc\",\n  \"#00ff78\",\n  \"#00c000\"\n];\n\nconsole.log(sample.filter((c)=> temp(c) === 'warm'))\n// [ '#00ff78' ]\n\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"what-next-",children:"What next ?"}),"\n",(0,o.jsx)(n.p,{children:"This was just a sample of what operations are possible with some of the utilities. Hopefully, you were able to get an idea of how to compose the functions to create dynamic and beautiful color scales."}),"\n",(0,o.jsxs)(n.p,{children:["Ready to dive in to the ",(0,o.jsx)(n.a,{href:"/api/",children:"full API"})," ?"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var o=t(6540);const s={},r=o.createContext(s);function l(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);