"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[183],{4870:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=t(4848),o=t(8453);const s={title:"What's new ?",description:"See what has changed in v3 and added improvements",sidebar_position:5},r=void 0,a={id:"guides/changes",title:"What's new ?",description:"See what has changed in v3 and added improvements",source:"@site/docs/guides/changes.mdx",sourceDirName:"guides",slug:"/guides/changes",permalink:"/docs/guides/changes",draft:!1,unlisted:!1,editUrl:"https://github.com/prjctimg/huetiful/tree/main/www/docs/guides/changes.mdx",tags:[],version:"current",lastUpdatedBy:"Dean prjctimg",lastUpdatedAt:1725722201e3,sidebarPosition:5,frontMatter:{title:"What's new ?",description:"See what has changed in v3 and added improvements",sidebar_position:5},sidebar:"docs",previous:{title:"Errors and defaults",permalink:"/docs/guides/behaviour"},next:{title:"Installation and usage",permalink:"/docs/guides/installation"}},l={},c=[{value:"Slimmer API",id:"slimmer-api",level:2},{value:"filterBy",id:"filterby",level:3},{value:"sortBy",id:"sortby",level:3},{value:"token",id:"token",level:3},{value:"Method chaining with color() and load()",id:"method-chaining-with-color-and-load",level:3},{value:"Smaller bundle",id:"smaller-bundle",level:3},{value:"A few more <code>collection</code> methods",id:"a-few-more-collection-methods",level:3},{value:"stats()",id:"stats",level:4},{value:"distribute()",id:"distribute",level:4},{value:"Better types and code examples",id:"better-types-and-code-examples",level:3}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",del:"del",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Prior to v3 the API was not very DRY, with utilities being over specialised for one particular task. Most notably, the ",(0,i.jsx)(n.code,{children:"sortBy"})," and ",(0,i.jsx)(n.code,{children:"filterBy"})," utilities have been merged and are now customizable through an ",(0,i.jsx)(n.code,{children:"options"})," object."]}),"\n",(0,i.jsx)(n.h2,{id:"slimmer-api",children:"Slimmer API"}),"\n",(0,i.jsx)(n.h3,{id:"filterby",children:(0,i.jsx)(n.a,{href:"/api/collection#filterBy",children:"filterBy"})}),"\n",(0,i.jsxs)(n.p,{children:["You can now get your passed in collection filtered using different factors and ",(0,i.jsx)(n.code,{children:"ranges"})," for each ",(0,i.jsx)(n.code,{children:"factor"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { filterBy } from \"huetiful-js\";\n\n// before\nfilterByHue(...)\nfilterBySaturation(...)\nfilterByLuminance(...)\n\n// after\nfilterBy(...,{ factors:['hue','chroma','luminance'],\nranges:{\n\thue:[...],\n\tchroma:[...],\n\tluminance:[...]\n}})\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"sortby",children:(0,i.jsx)(n.a,{href:"/api/collection#sortBy",children:"sortBy"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { sortBy } from \"huetiful-js\";\n\n// before\nsortByHue(...)\nsortBySaturation(...)\nsortByLuminance(...)\n\n// after\nsortBy(...,{ factor:['hue','chroma','luminance'], order:'desc' })\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"Easier to customize iteration behaviour than maintain small functions"}),"\n",(0,i.jsx)(n.h3,{id:"token",children:(0,i.jsx)(n.a,{href:"/api/utils#token",children:"token"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:['"One parser to ',(0,i.jsx)(n.del,{children:"rule"}),' convert them all"']}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Initially each color token type had a standalone converter function.\nAll these functions have been merged into one function, which can parse and output color tokens in different types."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Old syntax\nimport { num2rgb, toHex } from 'huetiful-js'\n\nlet cssNamedColor = 'pink'\nlet colorNumber = 5000\nlet colorObject = { l: 50, c: 20, h: 40, mode: 'lch' }\nlet colorObjectWithAlpha = { l: 50, c: 20, h: 40, alpha: 0.5, mode: 'lch' }\nlet arrColor = ['rgb', 120, 80, 50]\nlet arrColorWithAlpha = ['rgb', 120, 80, 50, 0.1]\n\n// any of the above color tokens is valid\n\ntoken(...)\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"method-chaining-with-color-and-load",children:["Method chaining with ",(0,i.jsx)(n.a,{href:"/api/wrappers#color",children:"color()"})," and ",(0,i.jsx)(n.a,{href:"/api/wrappers#load",children:"load()"})]}),"\n",(0,i.jsx)(n.p,{children:"Method chaining allows a more concise and readable syntax than nesting functions inside of each other."}),"\n",(0,i.jsx)(n.h3,{id:"smaller-bundle",children:"Smaller bundle"}),"\n",(0,i.jsx)(n.p,{children:"The library now supports a limited number of colorspaces because the mode definitions make the bundle really large."}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["See the Culori docs for ",(0,i.jsx)(n.a,{href:"https://culorijs.org/guides/tree-shaking/#culori-css",children:"more information on colorspaces"})," that are included by default.\nFor conversion across many colorspaces use the Culori library instead."]})}),"\n",(0,i.jsx)(n.p,{children:"Below is an exhaustive list of supported colorpaces:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"\nexport type Colorspaces =\n   | 'lab'\n   | 'lab65'\n   | 'rgb'\n   | 'lch'\n   | 'lch65'\n   | 'xyz65'\n   | 'xyz'\n\n\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"a-few-more-collection-methods",children:["A few more ",(0,i.jsx)(n.code,{children:"collection"})," methods"]}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"These functions are still experimental and may have breaking changes in future versions."})}),"\n",(0,i.jsx)(n.h4,{id:"stats",children:(0,i.jsx)(n.a,{href:"/api/collection#stats",children:"stats()"})}),"\n",(0,i.jsxs)(n.p,{children:["This function gets the statistics for a collection of color tokens alongside some extra meta which can be useful when you want to know certain info before making a decision during color manipulation. It also has an ",(0,i.jsx)(n.code,{children:"options"})," object to customize how the stats are calculated."]}),"\n",(0,i.jsx)(n.h4,{id:"distribute",children:(0,i.jsx)(n.a,{href:"/api/collection#distribute",children:"distribute()"})}),"\n",(0,i.jsxs)(n.p,{children:["As the name suggests, this function opens a new avenue of creativity by distributing the specified ",(0,i.jsx)(n.code,{children:"factor"}),"s equally amongst other color tokens in the collection. Its behaviour can also be customized by passing an options object."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["If you think this function can be further improved, [open an issue](",(0,i.jsx)(n.a,{href:"https://github.com/prjctimg/huetiful/issues/new0",children:"https://github.com/prjctimg/huetiful/issues/new0"})," on the project repository alongside some suggestions you may have in mind!"]})}),"\n",(0,i.jsx)(n.h3,{id:"better-types-and-code-examples",children:"Better types and code examples"}),"\n",(0,i.jsx)(n.p,{children:"The library is written in TypeScript for better editor autocomplete support and type definitions for the API.\nThe code examples have also been updated to be more simple and straightforward."}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["Made something cool out of this ? You can share it ",(0,i.jsx)(n.a,{href:"https://x.com/prjctimg",children:"on my Twitter"}),"."]}),(0,i.jsx)(n.p,{children:"I'd love to see what can be built with this project!"})]}),"\n",(0,i.jsxs)(n.p,{children:["I hope you find this update useful! ","\ud83d\ude80"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);